(* Generated by Frama-C WP *)

Goal typed_matrixMultiply_loop_inv_24_preserved.
Hint matrixMultiply,preserved.
Proof.
intros.
unfold m.
rewrite access_update_neq.
rewrite H44.
assert(
forall (var : int),
0 <= var -> var <= i -> 
L_sum_matrix t_5 t_4 a_2 a_1 i_3 i_4 var i = 
L_sum_matrix t_5 (t_4 .[ a_4 <- x + x_1 * x_2]) a_2 a_1 i_3 i_4 var i).
{
apply (natlike_ind (fun var => var <= i -> 
L_sum_matrix t_5 t_4 a_2 a_1 i_3 i_4 var i = 
L_sum_matrix t_5 (t_4 .[ a_4 <- x + x_1 * x_2]) a_2 a_1 i_3 i_4 var i)).
  - rewrite A_Sum_matrix.Q_sum_matrix_1.
    rewrite A_Sum_matrix.Q_sum_matrix_1.
     reflexivity.
     all:try assumption.
     omega.
     omega.
     omega.
     omega.
  - intros.
    unfold Z.succ.
    replace (x0 + 1) with (1 + x0).
    rewrite <- A_Sum_matrix.Q_sum_matrix_2.
    rewrite <- A_Sum_matrix.Q_sum_matrix_2.
    rewrite <- H56.
    rewrite access_update_neq.
    rewrite access_update_neq.
    reflexivity.
    unfold a_4.
    unfold a_3.
    apply not_eq_sym.
    apply H53.
    all: try omega.
    unfold a_4.
    unfold a_3.
    apply not_eq_sym.
    apply H52.
    all: try omega.
}  
apply H55.
all: try omega.   
unfold a_4.
unfold a_3.
apply not_eq_sym.
apply H54.
all: try omega.
(* auto with zarith. *)
Qed.

Goal typed_matrixMultiply_loop_inv_27_preserved.
Hint matrixMultiply,preserved.
Proof.
intros.
unfold m.
rewrite access_update_neq.
rewrite H32.
assert(
forall (var : int),
0 <= var -> var <= i_1 -> 
L_sum_matrix t_5 t_4 a_2 a_1 i_4 i_3 var i = 
L_sum_matrix t_5 (t_4 .[ a_4 <- x + x_1 * x_2]) a_2 a_1 i_4 i_3 var i).
{
apply (natlike_ind (fun var => var <= i_1 -> 
L_sum_matrix t_5 t_4 a_2 a_1 i_4 i_3 var i = 
L_sum_matrix t_5 (t_4 .[ a_4 <- x + x_1 * x_2]) a_2 a_1 i_4 i_3 var i)).
  - rewrite A_Sum_matrix.Q_sum_matrix_1.
    rewrite A_Sum_matrix.Q_sum_matrix_1.
     reflexivity.
     all:try assumption.
     omega.
     omega.
     omega.
     omega.
  - intros.
    unfold Z.succ.
    replace (x0 + 1) with (1 + x0).
    rewrite <- A_Sum_matrix.Q_sum_matrix_2.
    rewrite <- A_Sum_matrix.Q_sum_matrix_2.
    rewrite <- H55.
    rewrite access_update_neq.
    rewrite access_update_neq.
    reflexivity.
    unfold a_4.
    unfold a_3.
    apply not_eq_sym.
    apply H52.
    all: try omega.
    unfold a_4.
    unfold a_3.
    apply not_eq_sym.
    apply H51.
    all: try omega.
}  
apply H54.
all: try omega.   
unfold a_4.
unfold a_3.
apply not_eq_sym.
apply H50.
all: try omega.
Qed.

Goal typed_matrixMultiply_loop_inv_28_preserved.
Hint matrixMultiply,preserved.
Proof.
intros.
unfold m.
destruct (Zle_lt_or_eq i_3 i_2 H7).
 * rewrite access_update_neq.
  rewrite H36.
   assert( x_3 <= i).
  {
    unfold x_3.
  omega.
  }
  revert H55.
  apply (natlike_ind) with (x:= x_3).
    - rewrite A_Sum_matrix.Q_sum_matrix_1.
      rewrite A_Sum_matrix.Q_sum_matrix_1.
       reflexivity.
       all:try assumption.
       omega.
       omega.
       omega.
       omega.
    - intros.
      unfold Z.succ.
      replace (x0 + 1) with (1 + x0).
      rewrite <- A_Sum_matrix.Q_sum_matrix_2.
      rewrite <- A_Sum_matrix.Q_sum_matrix_2.
      rewrite <- H56.
      rewrite access_update_neq.
      rewrite access_update_neq.
      reflexivity.
      unfold a_4.
      unfold a_3.
      apply not_eq_sym.
      apply H52.
      all: try omega.
      unfold a_4.
      unfold a_3.
      apply not_eq_sym.
      apply H51.
      all: try omega.
    - unfold x_3.
      omega.
    - omega.
    - omega.
    - unfold a_4.
    unfold shift_sint32,shift.
    intros contra. 
    inversion contra.
    omega.
  * unfold a_4.
    rewrite H54.
    rewrite access_update.
    unfold x,x_1,x_2.
    unfold a_4.
    rewrite H32.
    unfold x_3.
  rewrite  <- A_Sum_matrix.Q_sum_matrix_2.
  f_equal.
   assert( 
   forall z,
  L_sum_matrix t_5 t_4 a_2 a_1 i_4 i_2 i_1 i =
  L_sum_matrix t_5 (t_4 .[ shift_sint32 a_3 i_2 <- z])  a_2 a_1 i_4 i_2 i_1 i).
  {   revert H0.
  apply (natlike_ind) with (x:= i_1).
      - intros.
        rewrite A_Sum_matrix.Q_sum_matrix_1.
        rewrite A_Sum_matrix.Q_sum_matrix_1.
        reflexivity.
        all:try omega.
      - intros. 
      unfold Z.succ.
      replace (x0 + 1) with (1 + x0).
        rewrite <- A_Sum_matrix.Q_sum_matrix_2.
        rewrite <- A_Sum_matrix.Q_sum_matrix_2.
        f_equal.
        apply H55.
        omega.
        rewrite access_update_neq.
        rewrite access_update_neq.
        reflexivity.
        unfold a_3.
        apply not_eq_sym.
        apply H52.
        all:try omega.
                unfold a_3.
        apply not_eq_sym.
        apply H51.
        all:try omega.
        - omega.
        }
        apply H55.
        rewrite access_update_neq.
        rewrite access_update_neq.
        reflexivity.
        unfold a_3.
        apply not_eq_sym.
        apply H52.
        all:try omega.
                unfold a_3.
        apply not_eq_sym.
        apply H51.
        all:try omega.
Qed.

Goal typed_matrixMultiply_loop_inv_9_established.
Hint established,matrixMultiply.
Proof.
  auto with zarith.
Qed.


