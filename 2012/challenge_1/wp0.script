(* Generated by Frama-C WP *)

Goal typed_lcp_post.
Hint default,lcp,property.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_lemma_num3.
Hint num3,property.
Proof.
intros.
apply Zlt_lower_bound_ind with
(P:= fun k => L_num t a i i_1 k i_2 + L_num t a i_5 i_4 i i_1 = L_num t a i_5 i_4 k i_2)(z := i).
- intros.
  apply Zlt_lower_bound_ind with
  (P:= fun k => L_num t a i i_1 x k + L_num t a i_5 i_4 i i_1 = L_num t a i_5 i_4 x k)(z := i_1).
  + intros.
  assert (h:(i = x \/ i < x)) by omega.
  assert (h1:(i_1 = x0 \/ i_1 < x0)) by omega.
  destruct h.
  * rewrite H9.
    destruct h1.
    -- rewrite H10.
       rewrite Q_num0.
       ++  simpl.
           reflexivity.
       ++ omega.
   --
    rewrite Q_num0.
      ++ simpl.
         rewrite Q_num0.
         rewrite Q_num0.
         reflexivity.
         omega.
   
    
(* auto with zarith. *)
Qed.

Goal typed_lemma_num3_2.
Hint num3,property.
Proof.
(* --------------------------------------
  
From 'typed_lemma_num3': 
intros.
apply Zlt_lower_bound_ind with
(P:= fun k => L_num t a i i_1 k i_2 + L_num t a i_5 i_4 i i_1 = L_num t a i_5 i_4 k i_2)(z := i).
- intros.
  apply Zlt_lower_bound_ind with
  (P:= fun k => L_num t a i i_1 x k + L_num t a i_5 i_4 i i_1 = L_num t a i_5 i_4 x k)(z := i_1).
  + intros.
  assert (h:(i = x \/ i < x)) by omega.
  assert (h1:(i_1 = x0 \/ i_1 < x0)) by omega.
  destruct h.
  * rewrite H9.
    destruct h1.
    -- rewrite H10.
       rewrite Q_num0.
       ++  simpl.
           reflexivity.
       ++ omega.
   --
    rewrite Q_num0.
      ++ simpl.
         rewrite Q_num0.
         rewrite Q_num0.
         reflexivity.
         omega.
   
    
(* auto with zarith. *)
*)
Qed.


